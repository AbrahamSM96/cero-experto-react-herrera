{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","event","target","protoTypes","PropTypes","func","isRequired","GifGridItem","title","url","className","src","alt","GifGrid","category","data","loading","images","setImages","getGifs","a","CATEGORY","encodeURI","API","fetch","response","json","gifs","map","img","id","downsized_medium","useEffect","useFetchGifs","item","GifExpertApp","categories","cat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4NAEe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEfC,mBAAS,IAFM,mBAE5CC,EAF4C,KAEhCC,EAFgC,KAgBnD,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdpB,SAACC,GACvBV,EAAcU,EAAMC,OAAOH,YAmBnCZ,EAAYgB,WAAa,CACrBf,cAAegB,IAAUC,KAAKC,Y,mCCzBnB,SAASC,EAAT,GAAsC,IAAfC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,IACzC,OACI,sBAAKC,UAAU,2CAAf,UACI,6BAAKF,IACL,qBAAKG,IAAKF,EAAKG,IAAKJ,OCFjB,SAASK,EAAT,GAAgC,IAAbC,EAAY,EAAZA,SAAY,ECAlB,SAACA,GAAc,IAAD,EAEVzB,mBAAS,CACjC0B,KAAM,GACNC,SAAS,IAJyB,mBAE/BC,EAF+B,KAEvBC,EAFuB,KAOhCC,EAAO,uCAAG,WAAOL,GAAP,yBAAAM,EAAA,6DAGNC,EAAWC,UAAUR,GAErBS,EALM,UACA,iCADA,oBAKkBF,EALlB,kBAIE,GAJF,oBAEI,oCAFJ,SAMWG,MAAMD,GANjB,cAMNE,EANM,iBAOWA,EAASC,OAPpB,iBAOJX,EAPI,EAOJA,KACFY,EAAOZ,EAAKa,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRtB,MAAOqB,EAAIrB,MACXC,IAAG,UAAEoB,EAAIZ,cAAN,aAAE,EAAYc,iBAAiBtB,QAG1CS,EAAU,CACNH,KAAMY,EACNX,SAAS,IAjBD,4CAAH,sDAyBb,OAJAgB,qBAAU,WACNb,EAAQL,KACT,CAACA,IAEGG,ED9BmBgB,CAAanB,GAA/BC,EAFkC,EAElCA,KAAMC,EAF4B,EAE5BA,QAGd,OACI,qCACI,oBAAIN,UAAU,sCAAd,SAAqDI,IAErD,qBAAKJ,UAAU,WAAf,SAEQM,EAAU,oBAAIN,UAAU,mCAAd,qBAAgEK,EAAKa,KAAI,SAACM,GAAD,OAC/E,cAAC3B,EAAD,eAAoC2B,GAApC,UAAqBA,EAAKJ,aEX3C,IAAMK,EAAe,WAAO,IAAD,EAEM9C,mBAAS,CAAC,gBAFhB,mBAEvB+C,EAFuB,KAEXhD,EAFW,KAS9B,OACI,gCACI,8CACA,cAACD,EAAD,CAAaC,cAAeA,IAC5B,uBACA,6BAEQgD,EAAWR,KAAI,SAACS,GAAD,OACX,cAACxB,EAAD,CAAmBC,SAAUuB,GAAfA,YAQtCF,EAAahC,WAAa,CACtBf,cAAegB,IAAUC,KAAKC,YC/BlC,IAYegC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.dc70b1a4.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nexport default function AddCategory({ setCategories }) {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (inputValue.trim().length > 2) {\n            setCategories((cats) => [inputValue, ...cats])\n            setInputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n        </form>\n    )\n}\n\n\nAddCategory.protoTypes = {\n    setCategories: PropTypes.func.isRequired\n}","import React from 'react'\n\nexport default function GifGridItem({ title, url }) {\n    return (\n        <div className=\"card animate__animated animate__fadeInUp\">\n            <h2>{title}</h2>\n            <img src={url} alt={title} />\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport GifGridItem from './GifGridItem'\n\nexport default function GifGrid({ category }) {\n\n    const { data, loading } = useFetchGifs(category)\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInUp\">{category}</h3>\n\n            <div className=\"cardGrid\">\n                {\n                    loading ? <h1 className=\"animate__animated animate__flash\">Loading</h1> : data.map((item) => (\n                        <GifGridItem key={`${item.id}`} {...item} />\n                    ))\n                }\n            </div >\n        </>\n    )\n}\n","\n\nimport { useState, useEffect } from 'react'\n\nexport const useFetchGifs = (category) => {\n\n    const [images, setImages] = useState({\n        data: [],\n        loading: true\n    })\n\n    const getGifs = async (category) => {\n        const URI = 'https://api.giphy.com/v1/gifs/'\n        const API_KEY = '4h6xSD2bAOTCgvV0VEMDK091XK6maDTw'\n        const CATEGORY = encodeURI(category)\n        const LIMIT = 10\n        const API = `${URI}search?q=${CATEGORY}&limit=${LIMIT}&api_key=${API_KEY}`\n        const response = await fetch(API)\n        const { data } = await response.json()\n        const gifs = data.map((img) => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        })\n        setImages({\n            data: gifs,\n            loading: false\n        })\n    }\n\n    useEffect(() => {\n        getGifs(category)\n    }, [category])\n\n    return images\n}","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport AddCategory from './components/AddCategory'\nimport GifGrid from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon Ball'])\n\n    // const handleAdd = () => {\n    //   setCategories(() => [...categories, 'Hulk'])\n    // setCategories((cats) => [...cats, 'Hulk'])\n    //  }\n\n    return (\n        <div>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map((cat) =>\n                        <GifGrid key={cat} category={cat} />\n                    )\n                }\n            </ol>\n        </div>\n    )\n}\n\nGifExpertApp.protoTypes = {\n    setCategories: PropTypes.func.isRequired\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}